<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-08-29T21:05:45+09:00</updated><id>http://localhost:4000/</id><title type="html">hackerwins blog</title><subtitle>Done is better than perfect.
</subtitle><entry><title type="html">Idea 06. Talk is cheap. Show me the code.</title><link href="http://localhost:4000/idea/2017/08/29/talk-is-cheap-show-me-the-code.html" rel="alternate" type="text/html" title="Idea 06. Talk is cheap. Show me the code." /><published>2017-08-29T21:04:00+09:00</published><updated>2017-08-29T21:04:00+09:00</updated><id>http://localhost:4000/idea/2017/08/29/talk-is-cheap-show-me-the-code</id><content type="html" xml:base="http://localhost:4000/idea/2017/08/29/talk-is-cheap-show-me-the-code.html">&lt;blockquote&gt;
  &lt;p&gt;“Talk is cheap. Show me the code.” from Linus Torvalds&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">“Talk is cheap. Show me the code.” from Linus Torvalds</summary></entry><entry><title type="html">Idea 05. 디자인 태도</title><link href="http://localhost:4000/idea/2011/12/17/design-attitude.html" rel="alternate" type="text/html" title="Idea 05. 디자인 태도" /><published>2011-12-17T11:31:00+09:00</published><updated>2011-12-17T11:31:00+09:00</updated><id>http://localhost:4000/idea/2011/12/17/design-attitude</id><content type="html" xml:base="http://localhost:4000/idea/2011/12/17/design-attitude.html">&lt;p&gt;좋은 디자인으로 변경하자고 제안할 때 “이미 돌아가는 것을 왜 바꾸느냐?” 혹은 “이것은 예전에 합의한 것인데 왜 바꾸느냐?” 라는 이야기를 듣는 경우가 종종 있다.&lt;/p&gt;

&lt;p&gt;바꾸는 가장 큰 이유는 현재의 나쁜 아이디어를 고수하는 것은 가능성을 잃어버리게 하기 때문이다. 문제는 나쁜 아이디어를 만든 것보다 그것을 고수하는 것에 있다. 이것은 우리의 발목을 잡는다. 이런 집착은 탐색을 지속하며 더 나은 것을 찾기 어렵게 한다. 더 좋은 아이디어가 발견 될때 자신의 어설픈 아이디어가 옳았다는 것을 증명하거나 방어하는 것에 시간과 힘을 쓰지 말고 더 나은 아이디어를 선택할 수 있는 용기가 필요하다.&lt;/p&gt;

&lt;p&gt;우리는 중요한 사안을 너무 쉽게 결정하고 그것에 매몰되는 것은 아닌지 생각해봐야한다. 우리가 믿었던 최소 단위 원자도 쪼개지는 마당에 변경 불가능한 아이디어는 없다. 모든 아이디어는 더 나은 아이디어가 발견 될때까지 사용한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;‘디자인 태도’란 어설픈 아이디어를 솎아내고 최후의 좋은 아이디어들을 고를 때까지 여러 가능성을 생각해보고 방향이 잡힐때까지는 ‘모든 것을 뒤집어 고려할 수 있는 의지’를 포함한다. - 비즈니스 모델의 탄생 중&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">좋은 디자인으로 변경하자고 제안할 때 “이미 돌아가는 것을 왜 바꾸느냐?” 혹은 “이것은 예전에 합의한 것인데 왜 바꾸느냐?” 라는 이야기를 듣는 경우가 종종 있다.</summary></entry><entry><title type="html">Idea 04. 소프트웨어 품질과 개발문화</title><link href="http://localhost:4000/idea/2011/11/28/quality_and_culture.html" rel="alternate" type="text/html" title="Idea 04. 소프트웨어 품질과 개발문화" /><published>2011-11-28T18:34:00+09:00</published><updated>2011-11-28T18:34:00+09:00</updated><id>http://localhost:4000/idea/2011/11/28/quality_and_culture</id><content type="html" xml:base="http://localhost:4000/idea/2011/11/28/quality_and_culture.html">&lt;p&gt;나와 팀은 지난 몇몇 프로젝트를 진행하는 중 소프트웨어의 품질이 개발팀의 건전한 개발문화를 통해 향상된다고 믿게 되었다. 우리가 발견하고 적용한 건전한 개발문화란 어떤 것이 있을까?&lt;/p&gt;

&lt;p&gt;첫번째. 소스코드 공동 소유다.&lt;/p&gt;

&lt;p&gt;소스코드는 개인의 소유가 아닌 팀의 공동 소유물이다. 이는 팀원들의 솔직한 커뮤니케이션 통해 이루어질 수 있다.&lt;/p&gt;

&lt;p&gt;소스코드나 일감이 개인의 소유일 경우 개인은 자신의 탑을 쌓을 확률이 높아진다. (여기서 말하는 탑은 혼자만 고칠 수 있는 코드 혹은 잘못되었지만 그 사실을 숨기고 있고 남에게 보여주기 싫은 코드,… 등이 있다.) 이런 상황에서 개발자는 메니저에게 비이상적인 개발일정을 보고하기도하고 특정한 변경이 불가능하다고 자신의 구조를 방어하기도 한다.&lt;/p&gt;

&lt;p&gt;팀이 소스코드를 공동 소유물로 여긴다면 소스코드는 더욱 건전해지고 개개인들이 만드는 기능 사이에 중복기능을 구현할 확률도 줄일 수 있다.&lt;/p&gt;

&lt;p&gt;특히 어려운 문제의 알고리즘이나 프로그램 전체의 아키텍쳐에 대해서는 상호 리뷰 혹은 짝프로그래밍이 필수 이다. 여기서 팀은 어려운 문제를 개인에게 맡기지 않고 팀의 문제로 가져간다. 주로 짝프로그래밍을 활용하는데 개인이 내리기 힘든의사 결정을 최소 두 명이상이 고민하여 결정하도록 한다. 혼자 A가 좋을까 B가 좋을까 생각하지 않고 토론을 통해서 A혹은 B를 결정한다. 역시 혼자 진행하는 것에 비해 빠른 의사 결정이 이루어진다.&lt;/p&gt;

&lt;p&gt;팀원들은 상대방의 코드를 활발하게 리딩해야한다. 이때 팀의 커뮤니케이션이 소스코드를 통해서 이루어지기도 한다. 상대방의 코드를 탐색하고 잘못된 부분에 이의를 제기해야하고 서로 이야기한 결과 잘못되었으면 과감히 수정하거나 삭제해야한다. 여기서 작성자는 자신의 코드가 지워진다는 생각은 내려놔야 한다. 코드는 팀의 소유물이니까…&lt;/p&gt;

&lt;p&gt;공동 소유가 제대로 적용된 결과로는 마치 한명이 짠 것과 같은 코딩 스타일과 프로그램 구조가 나오게 된다.&lt;/p&gt;

&lt;p&gt;두번째. 팀 학습&lt;/p&gt;

&lt;p&gt;두번째 말하고자 하는 건전한 개발 문화는 바로 팀 학습이다.&lt;/p&gt;

&lt;p&gt;팀원 중 한 사람이 새로운 프로그래밍 패러다임이나 프레임워크에 대해 공부를 한다. 그리고 자기가 알게된 내용을 팀에 전파한다. 이는 자체 세미나를 통해서 전파되기도 하고 짝프로그래밍을 통해서 전파되기도 한다. 개인 모두가 새로운 주제에 대해서 각자 공부하는 것이 아니고 관심깊게 본 다른 사람을 통해 배운다.&lt;/p&gt;

&lt;p&gt;나의 경험으로는 팀원 중 한 사람이 Functional Programming을 공부하고 리스트 처리에 대한 프레임워크를 만들어서 다른 팀원들이 좀 더 비즈니스 로직에 집중 할수 있게 도왔던적이 있다. 그 결과 개발팀은 개발 속도가 향상시킬 수 있었고 전체 소스코드의 양 또한 줄일 수 있었다.&lt;/p&gt;

&lt;p&gt;학습의 주제가 꼭 기술적인 것일 필요는 없다. 팀의 프로젝트를 도울 수 있는 어떤 것이든 상관이 없다. 예) 플레닝 포커, …&lt;/p&gt;

&lt;p&gt;건전한 개발문화를 통해 발전된 팀은 개개인의 능력도 뛰어나고 전체적으로 볼때는 한몸처럼 움직일 것이다.&lt;/p&gt;</content><author><name></name></author><summary type="html">나와 팀은 지난 몇몇 프로젝트를 진행하는 중 소프트웨어의 품질이 개발팀의 건전한 개발문화를 통해 향상된다고 믿게 되었다. 우리가 발견하고 적용한 건전한 개발문화란 어떤 것이 있을까?</summary></entry><entry><title type="html">Idea 03. 증상만 치료하지 말고, 원인을 제거하라.</title><link href="http://localhost:4000/idea/2011/11/14/eliminate-cause.html" rel="alternate" type="text/html" title="Idea 03. 증상만 치료하지 말고, 원인을 제거하라." /><published>2011-11-14T23:09:00+09:00</published><updated>2011-11-14T23:09:00+09:00</updated><id>http://localhost:4000/idea/2011/11/14/eliminate-cause</id><content type="html" xml:base="http://localhost:4000/idea/2011/11/14/eliminate-cause.html">&lt;blockquote&gt;
  &lt;p&gt;엔토니 로빈스(anthoy Robbins)는 그의 책 [내 안의 거인을 일깨우자]에서 어떤 의사의 이야기를 하고 있다. 한 의사가 물살이 빠른 강의 제방에 서 있다가, 물에 떠내려가며 살려 달라고 외치는 비명소리를 들었다. 자기 이외에는 도와줄 사람이 없다는 것을 안 그 의사는, 주저하지 않고 물 속으로 뛰어들었다. 물에 빠진 사람을 강가로 끌어 낸 뒤, 의사는, 주저하지 않고 물 속으로 뛰어들었다. 물에 빠진 사람을 강가로 끌어 낸 뒤, 의사는 인공 호흡으로 그를 소생시키려 했다. 그런데 그가 소생되기도 전에, 강에서 두 사람의 비명 소리가 들려왔다. 의사가 두 사람을 구조하여 소생시키기 무섭게, 강에서는 또다시 네사람의 비명소리가 들려 왔다. 이어서, 여덟명의 비명이 들려 왔다… 안타깝게도, 이 의사는 사람들을 구조하기에 너무 바쁜 나머지, 상류로 올라가서 도대체 누가 사람들을 물에 빠뜨리는가 찾아 볼 시간이 없었다.&lt;/p&gt;

  &lt;p&gt;Writing Solid Code P. 273 증상만 치료하는 의사
증상만 치료하지 말고, 원인을 제거하라.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;프로젝트를 진행하다 보면 개발 경험이 풍부한 개발자 임에도 불구하고 이런 실수를 저지르는 것을 자주 목격한다.&lt;/p&gt;

&lt;p&gt;계속 발전 하고 싶으면 원인을 제거하라고 말하고 싶다.&lt;/p&gt;</content><author><name></name></author><summary type="html">엔토니 로빈스(anthoy Robbins)는 그의 책 [내 안의 거인을 일깨우자]에서 어떤 의사의 이야기를 하고 있다. 한 의사가 물살이 빠른 강의 제방에 서 있다가, 물에 떠내려가며 살려 달라고 외치는 비명소리를 들었다. 자기 이외에는 도와줄 사람이 없다는 것을 안 그 의사는, 주저하지 않고 물 속으로 뛰어들었다. 물에 빠진 사람을 강가로 끌어 낸 뒤, 의사는, 주저하지 않고 물 속으로 뛰어들었다. 물에 빠진 사람을 강가로 끌어 낸 뒤, 의사는 인공 호흡으로 그를 소생시키려 했다. 그런데 그가 소생되기도 전에, 강에서 두 사람의 비명 소리가 들려왔다. 의사가 두 사람을 구조하여 소생시키기 무섭게, 강에서는 또다시 네사람의 비명소리가 들려 왔다. 이어서, 여덟명의 비명이 들려 왔다… 안타깝게도, 이 의사는 사람들을 구조하기에 너무 바쁜 나머지, 상류로 올라가서 도대체 누가 사람들을 물에 빠뜨리는가 찾아 볼 시간이 없었다. Writing Solid Code P. 273 증상만 치료하는 의사 증상만 치료하지 말고, 원인을 제거하라.</summary></entry><entry><title type="html">Idea 02. 소프트웨어, 건축물과 정원</title><link href="http://localhost:4000/idea/2011/09/28/brida.html" rel="alternate" type="text/html" title="Idea 02. 소프트웨어, 건축물과 정원" /><published>2011-09-28T03:58:00+09:00</published><updated>2011-09-28T03:58:00+09:00</updated><id>http://localhost:4000/idea/2011/09/28/brida</id><content type="html" xml:base="http://localhost:4000/idea/2011/09/28/brida.html">&lt;p&gt;파울로 코엘료의 “브리다” 의 들어가는 말에 아래와 같은 글이 적혀 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;건물을 세우는 사람들은 그 일에 몇 년이라는 세월을 바치기도 하지만, 결국 언젠가는 그 일을 끝내게 됩니다. 그리고 그 일을 마치는 순간, 그는 자신이 쌓아올린 벽 안에 갇히게 됩니다. 건물을 세우는 일이 끝나면, 그 삶은 의미를 잃게 되는 것입니다.
하지만 정원을 일구는 사람들도 있습니다. 그들은 몰아치는 폭풍우와 끊임없이 변화하는 계절에 맞서 늘 고생하고 쉴 틈이 없습니다. 하지만 건물과는 달리 정원은 결코 성장을 멈추지 않습니다. 또한 정원은 그것을 일구는 사람의 관심을 요구하는 동시에 그의 삶에 위대한 모험이 함께할 수 있도록 해 줍니다. 정원을 일구는 사람들은 서로를 알아봅니다. 그들은 알고 있기 때문입니다. 식물 한 포기 한 포기의 역사 속에 온 세상의 성장이 깃들어 있음을…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이것을 읽고 소프트웨어 생각이나는 것은 왜 일까?
지속적인 성장을 하는 소프트웨어와 그렇지 않은 소프트웨어를 보았기 때문이다.&lt;/p&gt;</content><author><name></name></author><summary type="html">파울로 코엘료의 “브리다” 의 들어가는 말에 아래와 같은 글이 적혀 있다.</summary></entry><entry><title type="html">Idea 01. 토끼굴 속으로</title><link href="http://localhost:4000/idea/2011/04/25/down-the-rabbit-hole.html" rel="alternate" type="text/html" title="Idea 01. 토끼굴 속으로" /><published>2011-04-25T21:15:00+09:00</published><updated>2011-04-25T21:15:00+09:00</updated><id>http://localhost:4000/idea/2011/04/25/down-the-rabbit-hole</id><content type="html" xml:base="http://localhost:4000/idea/2011/04/25/down-the-rabbit-hole.html">&lt;p&gt;영화 매트릭스(Matrix)에서 모피어스는 주인공 네오(키아누 리브스 분)에게 빨간색 약과 파란색 약 중 하나를 선택하라고 말한다. 파란색 약을 먹는다면 매트릭스의 세계 속에서 편하게 살 수 있었지만 네오는 ‘진짜 현실’에 대한 호기심으로 빨간색 약을 선택한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/matrix_pills_imdol79.jpg&quot; alt=&quot;matrix pills&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 눈앞에 펼쳐지는 광경에 경악을 금치 못한다. 앨리스가 이상한 나라를 보면서 그랬던 것처럼 말이다(영화 매트릭스는 ‘이상한 나라의 앨리스’에 대한 오마쥬 영화이다. 초반부에 나오는 ‘흰 토끼를 따라가라’는 암호는 ‘이상한 나라의 앨리스’의 장면을 패러디한 것이다.).&lt;/p&gt;

&lt;p&gt;네오와 앨리스는 바로 ‘호기심’ 때문에 편안하게 살아감을 포기하고 각각 빨간약, 토끼굴을 선택했다.&lt;/p&gt;

&lt;p&gt;메트릭스 속의 사람들은 프로그래밍 된 사회의 이미지를 소비한다. 그곳에서 나름 만족을 하며 살아가지만 실제 세상(메트릭스 밖)을 알지는 못한다. 심지어 메트릭스를 벗어난 한 사람이 다시 메트릭스에 들어가기를 원하는 장면도 나온다.&lt;/p&gt;

&lt;p&gt;하지만 호기심이 많은 사람들은 진실을 알고 싶어하고 또 모험을 갈망한다. 자신이 속한 시스템에 맞춰서 살기보다는 뭔가 다른 것을 찾기를 원한다. 위험을 감수해야 하지만 모험은 언제나 매력적이기 때문이다.&lt;/p&gt;

&lt;p&gt;난 빨간약을 선택했다. 그리고 잡스옹은 스텐포드에서 이런 말을 했다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Your time is limited, so don’t waste it living someone else’s life. Don’t be trapped by dogma — which is living with the results of other people’s thinking. Don’t let the noise of others’ opinions drown out your own inner voice. And most important, have the courage to follow your heart and intuition. They somehow already know what you truly want to become. Everything else is secondary.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;타성에 젖으면 끝이다. 용기를 갖으라고…&lt;/p&gt;</content><author><name></name></author><summary type="html">영화 매트릭스(Matrix)에서 모피어스는 주인공 네오(키아누 리브스 분)에게 빨간색 약과 파란색 약 중 하나를 선택하라고 말한다. 파란색 약을 먹는다면 매트릭스의 세계 속에서 편하게 살 수 있었지만 네오는 ‘진짜 현실’에 대한 호기심으로 빨간색 약을 선택한다.</summary></entry><entry><title type="html">Idea 00. 유능하고 경험 많은 개발자는 어디에 모여 살까?</title><link href="http://localhost:4000/idea/2011/03/20/where-is-the-developer.html" rel="alternate" type="text/html" title="Idea 00. 유능하고 경험 많은 개발자는 어디에 모여 살까?" /><published>2011-03-20T13:15:00+09:00</published><updated>2011-03-20T13:15:00+09:00</updated><id>http://localhost:4000/idea/2011/03/20/where-is-the-developer</id><content type="html" xml:base="http://localhost:4000/idea/2011/03/20/where-is-the-developer.html">&lt;p&gt;유능하고 경험 많은 개발자는 어디에 모여 살까? 우리 개발자는 매니저가 되는 것이 목표인가?&lt;/p&gt;

&lt;p&gt;2006년 가을 개발자라는 직업을 갖게되면서부터 자연스레 생긴 궁금증이다. 5년이 다되어 가는 시간동안 경험 많은 개발자들은 보기 힘었다. 왜 대부분의 개발자들은 매니저에 비해 미숙한거 같고 어리게만 느껴질까? (실제로 대부분의 개발자는 매니저에 비해 나이가 어리거나 그들의 부하직원인것 같다.)&lt;/p&gt;

&lt;p&gt;우리는 유능한 개발자들이 특정 연차가 되었을때 심화된 엔지니어링 테크를 타는 것이 아니고 매니저 테크를 타는 것을 쉽게 목격할 수 있다. 그들의 업무는 모델링, 알고리즘 풀어먹기, 불꽃 코딩 등등에서 회의하기, 메일보내기 답하기, 회의하기, 회의하기, 회의하기, 팀원이나 프로젝트의 일정이나 스펙을 관리하기, 회의하기로 바뀐다. 이제 좀 제대로 테크닉을 발휘 하면서 후임양성할때가 되었는데 개발로 부터 자연스럽게 멀어진다.&lt;/p&gt;

&lt;p&gt;일부(특히 개발을 살짝 맛만 봤다가 운이 좋게 매니저 테크를 탄) 매니저들은 개발은 쉬운 것, 애들이나 하는 것이라고 말하기도 한다.&lt;/p&gt;

&lt;p&gt;짧은 내 경험에서 알게된  개발(여기서 말하는 개발은 주로 엔지니어링)은 어렵다. 많은 것을 공부해야한다. 다양한 프로그래밍 언어는 물론이고 때로는 큰 규모의 프로그램을 구조화 하는 모델링 기법 혹은 알고리즘들, 수학에 관련되었을 수도 있고 새로나온 플렛폼 혹은 여러가지 프로그래밍 페러다임일 수도 있다. 최적의 제품을 제대로 만들기 위해서는 반드시 무엇인 가를 알아야 하고 공부해야할 경우가 있다. 개발자는 경력이 쌓일 수록 이런 것들을 공부해야 한다.(만약 아닌것 같고 그게 이글을 읽고 있는 사람이라면 제발 공부해라.) 특정 상황에선 현재로서는 해결할 수 없는 문제가 발생되기도 한다.  끊임없이 실험하고 방법을 찾으려고 시도할때는 꿈에서도 생각할 정도로 몰입해야하는 상황도 생긴다. 개발자라는 직업이 현실에는 의사, 변호사 같은 다른 전문직보다 진입장벽이 낮지만 그들은 사실 전문가이어야하고 전문직이어야 한다. 그래야 제대로 만들 수 있다.&lt;/p&gt;

&lt;p&gt;물론 매니저라는 직업이 나쁘다는 말을 하고 싶은 것이 아니다. 그들은 프로젝트에 필요한 직업이고 해야할 일이 있다. 매니지먼트 스킬은 엔지니어링 스킬과 조금 다른 테크이다. 난 단지 유능한 개발자들이 어설픈 매니저(물론 매니저가 더 맞고 천직이라고 느껴지면 가도 좋다.)가 되지 않고 유능한 개발자로 남아서 자신이 가지고 있는 기술을 풀어 먹었으면 좋을것 같다는 생각을 하는 것이다. 그러면 좋은 소프트웨어가 좀 더 많이 나오지 않을까? 하는 생각이든다.&lt;/p&gt;</content><author><name></name></author><summary type="html">유능하고 경험 많은 개발자는 어디에 모여 살까? 우리 개발자는 매니저가 되는 것이 목표인가?</summary></entry></feed>